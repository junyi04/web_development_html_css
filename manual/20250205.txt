포지셔닝
  1. position 속성
    3) absolute : position 속성에서 static이 아닌 첫 부모 요소를 기준으로 top, bottom, left, right, z-index 속성값을 이용하여 위치 조정 가능
      첫 부모 -> 가장 바깥 쪽 태그 x
        -> position: absolute; 표기한 태그의 바로 윗단계

      position 속성의 default 값  :static

      특징 :
        자리를 차지하지 않는다. 
        참조 사이트 기준으로 다른거 다 지운 상태로 position: absolute; 를 적용했을 경우에 회색 사각형이 하나 사라진 것으로 보이는 이유는 실제로 사라진 것이 아니라 오렌지 div 태그에 겹쳐진 상태로 회색 사각형이 하나 있는 상태로 봐야 함.

        -> 한칸 씩 밀려 들어와 있다. 그 결과로 눈에 보이는 사각형은 8개만 존재.

    4) fixed : 항상 부모 요소가 아니라 뷰포트(viewport)를 기준으로 함. 

      특징 :
        스크롤에 영향 받지 않는다 -> navigation bar과 같은 경우에는 스크롤을 내리더라도 존재해야 하기 때문에 응용이 가능할 수도 있음. -> 웹 사이트에서 특정 팝업 창을 띄운 후에 스크롤과 상관없이 한 곳에 고정시킬 때 '유용함'

    5) sticky : 어떤 요소가 스크롤로 이동할 수 있는 공간을 top, bottom, left, right, z-index 속성값을 이용하여 지정.

    특징 :
      부모 요소의 여백 등에도 영향을 받음.
      자식 요소의 위치를 고정(red div)해도 부모 요소의 위치(orange div)를 벗어나면 자식 요소는 더 이상 움직일 수 없기 깨문에 sticky는 부모 요소의 안쪽이 아닌 동등하거나 바깥쪽 요소에 지정하는 편이 나음.

    6) z-index 속성 
      x축, y축, z축에서 z축 관련 부분
      default 값은 auto = 0을 의미함.

      https://showcases.yalco.kr/html-css/02-09/02.html

      n3zindex 생성 > 관련 수업 했고

      Flex 수업 예정

      https://showcases.yalco.kr/html-css/02-11/01.html

  Flex layout
    모든 웹 사이트는 커다란 레이아웃 형태로 되어있고, 이를 만드는 방식이 다양함.
    예전에는 HTML과 블록 요소만 이용해서 레이아웃을 작성했으나, Flex 등장 이후에 CSS 기능을 적용하여 작성할 수 있게 됨.

    부모에 적용하게 되는 flex / 자식에 적용하게 되는 flex참조 사이트 기준으로 회색 div은 부모 요소 / 보라색 div 자식 요소 3개가 있음.

    div 태그이기 때문에 block 요소 적용되어있음. -> 이까지가 default
    min-width: 48px;
    min-height: 48px; 로 설정 -> 자식 요소가 

    1. display: flex; -> 세로 배치
    2. display: inline-flex; -> 부모 div 인라인 블록 (블록 개념에서 확인) 상태됨
    해당 부모 요소를 블록으로 두는게 flex, 인라인으로 만드는게 inline-flex

    1) flex-direction 속성
      flex-direction: row;                -> 내부 요소를 왼쪽부터 차례로 정렬 (메인 축이 x축이기 때문)  
      flex-direction: column;             -> 내부 요소를 위에서부터 정렬(메인 축이 y축)
      flex-direction: row-reverse;        
      flex-direction: column-reverse;

      reverse를 적용했을 시 -> HTML 상으로는 div의 순서가 바뀌지 않지만 웹 페이지 상에서의 눈으로 보는 순서가 뒤바뀜.

      flex-direction 속성에서 축의 방향을 어떻게 지정하느냐에 따라 달린 속성
        (1) justify-content : 메인 축에서 내부 요소를 정렬하는 방식
          flex-start : 시작지점부터 정렬
          flex-end : 끝부터 정렬
          center : 중간에 정렬
          space-between : 내부의 양쪽 요소를 처음과 끝 부분으로 보낸 그 중간값에 가운데를 배치

          cf) justify-content: start;
          cf) justify-content: end; 로 써도 상관없지만 reverse 먹일 때 오류가 발생할 수 있어서 flex-start / flex-end를 사용하는걸 강추

          space-around : 각 내부 요소의 양쪽에 일정한 크기의 빈 공간 배치함.
          space-evenly : 모든 빈 공강을 균일하게 배치

          -> flex-direction을 row로 배치하여 결과값을 보여줬는데 column 기준으로 복습하기

        (2) align-items : flex의 수직 축 (우린 rowㄹ 수업하기 때문에 보조 축이 아닌 애를 의미함)에서 내부 요소를 정렬할 방식을 지정 -> default로 stretch 지정.
          stretch : 보조 축 방향을 꽉 채워줌.
          flex-start : 보조 축의 상단으로 내부 요소를 갖다 붙임 (즉 row로 설정했다면 y축 상단으로)
          flex-end : 보조 축 아래쪽으로 내부 요소를 갖다 붙임

          마찬가지로 column을 기준으로 확인

          이상에서 확인했듯이 flex 레이아웃의 경우 컨테이너 안에 있는 내부 요소를 (자식 요소를 의미) 어느 방향으로 배치했느냐에 따라서 flex-direction / justify-content / align-items를 셋 다 조합해서 쓰는 경우가 많음 -> 머리깨지는 이유 중 하나

        (3) align-content -> 얘는 좀 았다가 설명


        여기서부터는 부모 요소의 영역을 넘어갈 정도로 많은 배치 방식
        (4) flex-wrap : 자식 요소가 부모 요소를 넘어가지 않도록 줄바꿈 -> 보통의 경우 컨텐츠가 한 줄이 아니고 여러 줄일 때 적용하는 편

          flex-wrap: wrap; 으로 잡아둔 상태에서의
            align-items vs. align-content 차이

            align-items :flex-start / center / flex-end 로 지정했을 경우 각각
              가운데 여백이 같은 크기의 공백으로 나뉘어진 상태에서 내부 요소가 위쪽, 가운데, 아래쪽을 기준으로 정렬됨.

            align-content: flex-start / center / flex-end 로 지정하면 각각
              내부 요소 전체가 '공백 없이' 위쪽, 가운데, 아래로 붙어 정렬됨.
                space-between / space-around / sapce-evenly 속성이 있어 justify-content 속성과 비교 가능 -> 간격 조절 용도

            gap : 내부 요소들 사이에 들어가는 공백의 크기 지정 -> 단위 em

      자식 요소에 적용하는 flex

      https://showcases.yalco.kr/html-css/02-11/02.html

    2) flex-basis : 메인 축의 길이 (flex-direction이 row면 x축 / column이면 y축)를 지정.
    3) flex-grow : 기본값은 0으로 되어있고, 공간이 남는 상태라면 빈 공간을 얼마나 가져갈지 지정.
    4) flex-shrink : 공간이 부족한 상태에서 요소마다 크기를 얼마나 나워줄까를 지정.

      flex 레이아웃을 지정할 때는 flex-basis / grow / shrink와 같이 속성값을 하나하나 지정할 수 있는데, flex 내에 여러 개의 값을 작성해서 CSS 코드 한줄 짜리오 만들기도 함.
      순서에 따른 속성값은 다음과 같음.

      flex: (flex-grow 값);
      flex: (flex-grow 값) (flex-basis 값);
      flex: (flex-grow 값) (flex-shrink 값) (flex-basis 값);

    5) order : 부모 컨테이너 안에서 여러 개의 자식 요소들이 있을 때 순서를 임의로 바꿀 수 있음 (HTML 문서의 문서를 수정한는 것이 아님) 

    https://showcases.yalco.kr/html-css/02-11/04.html



요소를 감추는 방법들
  웹 페이지 내에서는 필요에 따라서 특정 요소를 보이게끔 / 보이지 않게끔 조정할 필요가 있음.
  a. 원래 보이던 요소를 투명하게 바꾸는 것
  b. 요소가 안보이면서 + 적용 기능을 없애는 것


  1. CSS에서 요소를 숨기는 법

  opacity : 불투명도 조절 0 ~ 1 값
    1 : 불투명도 100% -> 설정한 색이 그대로 드러남.
    0 : 불투명도 0% -> 투명함.
    특징 :
      해당 요소를 시각적으로 불투명 정도를 조절한 것이기 때문에 마우스 오버 (:hover) 스크린 리더 기능 등은 그대로 남아 있음
        -> 그 결과 잘 안씀.

  visibility : 보이려면 visible / 안 보이려면 hidden
    특징 :
      hidden 설정했을 시 기존에 가지고 있던 기능들이 전부 해제됨 (opacity와의 차이점)

  display : inline / inline-block 으로 지정했을 시 (block이 아니라)에
  display: bibe; 이라면, 기존 요소가 차지하고 있던 자리마저 사라짐(visibility와의 차이)
  아예 흔적 자체를 날려버리기 때문에 기존의 기능들도 당연히 쓰지 않게 됨.

  마우스 커서 모양 바꾸기
    n2invisible 생성

20250206 수업 예정 파트 -> BEM 관련 / @ 사용








